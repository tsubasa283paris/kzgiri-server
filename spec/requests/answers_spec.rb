require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/topics/:topic_id/answers", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Answer. As you add validations to Answer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip("Add a hash of attributes valid for your model")
  end

  let(:invalid_attributes) do
    skip("Add a hash of attributes invalid for your model")
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # AnswersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) { {} }

  # generate test data
  let(:topic) { FactoryBot.create(:topic) }
  let(:answer) { FactoryBot.create(:answer, topic: topic) }

  describe ".create" do
    context "with valid parameters" do
      it "creates a new Answer" do
        expect {
          post topic_answers_url(topic),
               params: {
                 answer: valid_attributes
               },
               headers: valid_headers,
               as: :json
        }.to change(Answer, :count).by(1)
      end

      it "renders a JSON response with the new answer" do
        post topic_answers_url(topic),
             params: {
               answer: valid_attributes
             },
             headers: valid_headers,
             as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(
          a_string_including("application/json")
        )
      end
    end

    context "with invalid parameters" do
      it "does not create a new Answer" do
        expect {
          post topic_answers_url(topic, answer),
               params: {
                 answer: invalid_attributes
               },
               as: :json
        }.to change(Answer, :count).by(0)
      end

      it "renders a JSON response with errors for the new answer" do
        post topic_answers_url(topic, answer),
             params: {
               answer: invalid_attributes
             },
             headers: valid_headers,
             as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(
          a_string_including("application/json")
        )
      end
    end
  end

  describe ".update" do
    context "with valid parameters" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "updates the requested answer" do
        patch topic_answer_url(topic, answer),
              params: {
                answer: new_attributes
              },
              headers: valid_headers,
              as: :json
        answer.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the answer" do
        patch topic_answer_url(topic, answer),
              params: {
                answer: new_attributes
              },
              headers: valid_headers,
              as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(
          a_string_including("application/json")
        )
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the answer" do
        patch topic_answer_url(topic, answer),
              params: {
                answer: invalid_attributes
              },
              headers: valid_headers,
              as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(
          a_string_including("application/json")
        )
      end
    end
  end

  describe ".destroy" do
    it "destroys the requested answer" do
      answer_to_destroy = FactoryBot.create(:answer, topic: topic)
      expect {
        delete topic_answer_url(topic, answer_to_destroy),
               headers: valid_headers,
               as: :json
      }.to change(Answer, :count).by(-1)
    end
  end
end
